name: Deployment

on:
  push:
    branches: [ "main" ]

env:
  NODE_VERSION: '20.6.1'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 'prod'
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '[".env.template"]'
        env:
          # Web
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}

          # Server
          AWS_USER: ${{ vars.AWS_USER }}
          AWS_KEY: ${{ secrets.AWS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_BUCKET_NAME: ${{ vars.AWS_BUCKET_NAME }}
          AWS_REGION: ${{ vars.AWS_REGION }}

          CORS_URL: ${{ vars.CORS_URL }}

          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}

      - name: Rename .env.template to .env.production
        run: |
          mv apps/server/.env.template apps/server/.env
          mv apps/web/.env.template apps/web/.env

      - name: Install dependencies
        run: pnpm install

      - name: npm build
        run: |
          turbo lint
          turbo build

      - name: Compress build
        run: |
          tar --exclude='node_modules' -czvf artifacts.tar.gz ./* .[!.]*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: artifacts.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: 'prod'
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: SSH - Ensure temp folder for upload
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ vars.FTP_HOST }}
          username: ${{ vars.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22
          script: |
            mkdir -p ${{ vars.FTP_DIST_TEMP_DIR }}

      - name: SFTP - Deploy website
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ vars.FTP_USER }}
          server: ${{ vars.FTP_HOST }}
          port: 22
          local_path: './artifacts.tar.gz'
          remote_path: ${{ vars.FTP_DIST_TEMP_DIR }}/
          sftp_only: true
          password: ${{ secrets.FTP_PASSWORD }}

      - name: SSH - Clear previous App and stop Services
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ vars.FTP_HOST }}
          username: ${{ vars.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22
          debug: true
          script: |
            which -a node
            echo $PATH
            cd ${{ vars.FTP_DIST_TEMP_DIR }}/
            tar -xzvf artifacts.tar.gz
            rm artifacts.tar.gz
            pnpm i
      
            cd /
            pm2 stop cerebro_api
            service mysql stop
            
            rm -r ${{ vars.FTP_DIST_MONOREPO_DIR }} | exit 0
            mv ${{ secrets.FTP_DIST_TEMP_DIR }} ${{ vars.FTP_DIST_MONOREPO_DIR }} 
            
            rm -r ${{ secrets.FTP_DIST_TEMP_DIR }} | exit 0
            mv ${{ secrets.FTP_DIST_TEMP_DIR }}/apps/web/out ${{ vars.FTP_DIST_FRONT_DIR }} 
            
            cd ${{ vars.FTP_DIST_MONOREPO_DIR }}
            cd apps/server/
            pm2 start cerebro_api
            service mysql start
