trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
- group: 'cerebro-prod'
- name: pnpm_config_cache
  value: $(Pipeline.Workspace)/.pnpm-store

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - template: steps/pnpm-build.yml

  - stage: Deploy
    jobs:
    - deployment: Prod
      displayName: 'Deploy to Production'
      dependsOn: Build
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: app
                displayName: 'Download Artifact'
              - script: |
                  echo "Am i on server?"
                  echo "AWS_BUCKET_NAME: ${{ variables.AWS_BUCKET_NAME }}"
                  pwd
                  echo "check what is here"
                  ls
                  echo "Check Server"
                  whoami
                  ls /
                displayName: 'Check Server'

#  - stage: Deploy
#    dependsOn: Build
#    jobs:
#      - job: Deploy
#        displayName: 'Deploy to FTP Server'
#        steps:
#          - download: current
#            artifact: app
#            displayName: 'Download Artifact'
#          - script: |
#              echo "Am i on server?"
#              whoami
#              ls /
#            displayName: 'Check Server'
#          - task: FTPUpload@2
#            inputs:
#              credentialsOption: 'inputs'
#              serverUrl: ${{ variables.FTP_HOST }}
#              username: ${{ variables.FTP_USER }}
#              password: ${{ variables.FTP_PASSWORD }}
#              rootDirectory: '$(Pipeline.Workspace)'
#              filePatterns: '**/artifacts.tar.gz'
#              remoteDirectory: ${{ variables.FTP_DIST_TEMP_DIR }}
#              clean: false
#              preservePaths: false
#            displayName: 'Upload Artifact'
#          - task: SSH@0
#            inputs:
#              sshEndpoint: 'FTP Connection'
#              runOptions: 'inline'
#              inline: |
#                mkdir -p ${{ variables.FTP_DIST_TEMP_DIR }}
#            displayName: 'Ensure temp folder for upload'
#          - task: SSH@0
#            inputs:
#              sshEndpoint: 'FTP Connection'
#              runOptions: 'inline'
#              inline: |
#                cd ${{ variables.FTP_DIST_TEMP_DIR }}
#                tar -xzvf artifacts.tar.gz
#                rm artifacts.tar.gz
#                pnpm i
#                cd /
#                pm2 stop cerebro_api
#                service mysql stop
#                rm -r ${{ variables.FTP_DIST_MONOREPO_DIR }} | exit 0
#                mv ${{ variables.FTP_DIST_TEMP_DIR }} ${{ variables.FTP_DIST_MONOREPO_DIR }}
#                rm -r ${{ variables.FTP_DIST_TEMP_DIR }} | exit 0
#                mv ${{ variables.FTP_DIST_TEMP_DIR }}/apps/web/out ${{ variables.FTP_DIST_FRONT_DIR }}
#                cd ${{ variables.FTP_DIST_MONOREPO_DIR }}
#                cd apps/server/
#                pm2 start cerebro_api
#                service mysql start
#            displayName: 'Clear previous App and stop Services'